/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

// Instrument definition name space.
package org.openfeed.proto.inst;

// Builder options.
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

// Message fields descriptor.
import "InstrumentFieldSpec.proto";

// Market instrument definition message.
// FIXME renumber fields & ranges.
message InstrumentDefinition {

	// Market id used in the data feed.
	// Globally unique for for all vendor channels.
	// Static, never changes.
	// Defined by a vendor. Multiple vendors may agree to sync.
	optional sint64 marketId = 1;

	// Instrument type as enum.
	optional InstrumentType instrumentType = 2;

	// Market depth liquidity type.
	optional BookLiquidity bookLiquidity = 3;

	// Market depth implementation type.
	optional BookStructure bookStructure = 4;

	// Market book size/limit for non-finite bookStructures.
	optional sint32 bookDepth = 5;

	// The name of the market data vendor
	optional string vendorId = 6;

	// Human readable market symbol, assigned by the vendor
	// Not necessarily unique as the vendor could assign the same symbol to different
	// instruments, for example if the instruments trade on different exchanges.
	optional string symbol = 7;

	// Human readable market description.
	optional string description = 8;

	// Market CFI code: http://en.wikipedia.org/wiki/ISO_10962
	optional string cfiCode = 9;

	// Market currency code: http://en.wikipedia.org/wiki/ISO_4217
	optional string currencyCode = 10;

	// Market exchange code: http://en.wikipedia.org/wiki/ISO_10383
	optional string exchangeCode = 11;

	// Market group code: vendor-specific logical group a market belongs to.
	// Market group membership of a given market will be dynamically updated.
	// Example: "sp500-futures" represents all currently active SP-500 futures.
	// Example: "sp500-options" represents all currently active options on SP-500 futures.
	optional string marketGroupCode = 12;

	// Minimum price increment in market currency.
	optional Decimal minimumPriceIncrement = 13;

	// Contract point value in market currency.
	optional Decimal contractPointValue = 14;

	// Market price display rendering parameters.
	optional sint32 displayBase = 16;
	optional sint32 displayExponent = 15;

	// Market calendar.
	optional Calendar calendar = 17;

	// Date/Time instrument was created, millisFIX, UTC
	optional sint64 recordCreateTime = 18;

	// Date/Time instrument was updated, millisFIX, UTC
	optional sint64 recordUpdateTime = 19;


	// Market time zone TZ database name.
	// Permanent. Can be resolved into timeZoneOffset for given date/time.
	// See http://joda-time.sourceforge.net/timezones.html
	// See http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
	optional string timeZoneName = 202;

	// Ordered list of component market id for a synthetic market.
	repeated sint64 componentId = 21;

	// Identifies a logical grouping of instruments. By product, for example.
	optional string instrumentGroup = 22;

	// The Date of expiration for futures and options.  For symbology purposes, not lifecycle.
	optional SymbolExpiration symbolExpiration = 23;

	// active: can have market state updates, can have historical data
	// passive: can NOT have market state updates, but can have historical data
	// normally "active" means newly listed or currently non expired markets
	// normally "passive" means expired options, de-listed equities, etc.
	optional State state = 24;

	// The channel that updates for this instrument will appear on.
	optional sint32 channel = 25;

	// The marketId of the underlying asset.
	// Used by Futures and Options when the underlying instrument is defined by the vendor
	optional sint64 underlyingMarketId = 26;

	// Ordered list of underlying legs in a spread.
	repeated SpreadLeg spreadLeg = 1000;

	// #############################################

	// Option strike price in market currency.
	optional Decimal optionStrike = 2002;

	// Option type: call vs put.
	optional OptionType optionType = 3002;

	// Option style : American vs European.
	optional OptionStyle optionStyle = 4002;

	// #############################################

	// Spread type.
	optional SpreadType spreadType = 2000;

	// #############################################
}
