/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

// Package name.
package org.openfeed.proto.inst;

// Builder options.
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

// Instrument type.
enum InstrumentType {
	NO_INST_TYPE = 0;
	FOREX_TYPE = 1;
	INDEX_TYPE = 2;
	EQUITY_TYPE = 3;
	FUTURE_TYPE = 4;
	OPTION_TYPE = 5;
	SPREAD_TYPE = 6;
}

// Market depth liquidity type.
enum BookLiquidity {
	// Market without any book.
	NO_BOOK_LIQUIDITY = 0;
	// Unspecified/Default liquidity type.
	DEFAULT_LIQUIDITY = 1;
	// Book reflects only implied transactions.
	IMPLIED_LIQUIDITY = 2;
	// Book reflects both implied and explicit transactions.
	COMBINED_LIQUIDITY = 3;
}

// Market depth structure / implementation.
enum BookStructure {
	// Market without any book.
	NO_BOOK_STRUCTURE = 0;
	// Book uses explicit level/index
	PRICE_LEVEL_STRUCTURE = 1;
	// Book uses price entry value.
	PRICE_VALUE_STRUCTURE = 2;
	// Book uses order number.
	ORDER_NUMBER_STRUCTURE = 3;
}

// Option type.
enum OptionType {
	DEFAULT_OPTION = 0;
	CALL_OPTION = 1;
	PUT_OPTION = 2;
}

// Option style.
enum OptionStyle {
	DEFAULT_STYLE = 0;
	AMERICAN_STYLE = 1;
	EUROPEAN_STYLE = 2;
}

// Spread type.
enum SpreadType {
	DEFAULT_SPREAD = 0;
	CALENDAR_SPREAD = 1;
	FX_CALENDAR_SPREAD= 2;
	REDUCED_TICK_CALENDAR_SPREAD = 3;
	EQUITY_CALENDAR_SPREAD = 4;
	BUTTERFLY_FUTURES_SPREAD = 5;
	CONDOR_FUTURES_SPREAD = 6;
	STRIP_FUTURES_SPREAD = 7;
	INTERCOMMODITY_SPREAD = 8;
	MONTH_PACK_SPREAD = 10;
	PACK_BUTTERFLY_SPREAD = 11;
	DOUBLE_BUTTERFLY_SPREAD = 12;
	PACK_SPREAD = 13;
	CRACK_1TO1_SPREAD = 14;
	BUNDLE_SPREAD = 16;
	IMPLIED_TREASURY_INTERCOMMODITY_SPREAD = 17;
	TAS_CALENDAR_SPREAD = 18;
	COMMODITIES_INTERCOMMODITY_SPREAD = 19;
	BOND_INDEX_SPREAD = 20;
	BMD_FUTURES_STRIP_SPREAD = 21;

	THREE_WAY_SPREAD = 100;
	THREE_WAY_STRADDLE_VS_CALL_SPREAD = 101;
	THREE_WAY_STRADDLE_VS_PUT_SPREAD = 102;
	BOX_SPREAD = 103;
	BUTTERFLY_OPTIONS_SPREAD = 104;
	XMAS_TREE_SPREAD = 105;
	CONDITIONAL_CURVE_SPREAD = 106;
	CONDOR_OPTIONS_SPREAD = 107;
	DOUBLE_SPREAD = 108;
	HORIZONTAL_SPREAD = 109;
	HORIZONTAL_STRADDLE_SPREAD = 110;
	IRON_CONDOR_SPREAD = 111;
	RATIO_1X2_SPREAD = 112;
	RATIO_1X3_SPREAD = 113;
	RATIO_2X3_SPREAD = 114;
	RISK_REVERSAL_SPREAD = 115;
	STRADDLE_STRIP = 116;
	STRADDLE_SPREAD = 117;
	STRANGLE_SPREAD = 118;
	STRIP_OPTIONS_SPREAD = 119;
	VERTICAL_SPREAD = 120;
	JELLY_ROLL_SPREAD = 121;
	IRON_BUTTERFLY_SPREAD = 122;
	GUTS_SPREAD = 123;
	GENERIC_SPREAD = 124;
}

// FIXME consider removing.
enum Month {
	DEFAULT_MONTH = 0;
	JANUARY_MONTH = 1;
	FEBRUARY_MONTH = 2;
	MARCH_MONTH = 3;
	APRIL_MONTH = 4;
	MAY_MONTH = 5;
	JUNE_MONTH = 6;
	JULY_MONTH = 7;
	AUGUST_MONTH = 8;
	SEPTEMBER_MONTH = 9;
	OCTOBER_MONTH = 10;
	NOVEMBER_MONTH = 11;
	DECEMBER_MONTH = 12;
}

// Instrument life cycle phase.
// FIXME need more phases
//
// active: can have market state updates, can have historical data
// passive: can NOT have market state updates, but can have historical data
// normally "active" means newly listed or currently non expired markets
// normally "passive" means expired options, de-listed equities, etc.
enum State {

	// Default state.
	DEFAULT_STATE = 0;

	// Newly defined.
	// Actively trading.
	// Can have definition changes.
	ACTIVE_STATE = 1;

	// No longer trading.
	// Can NOT have definition changes.
	PASSIVE_STATE = 2;
}


// Price value.
message Decimal {
	optional sint64 mantissa = 1;
	optional sint32 exponent = 2;
}

// Time interval.
message Interval {

	// Beginning of time interval.
	optional sint64 timeStart = 1; // millisFIX, can be UTC or local time zone.

	// Ending of time interval.
	optional sint64 timeFinish = 2; // millisFIX, can be UTC or local time zone.
}

// Market life cycle events.
message Calendar {

	// Time span between market inception and termination, millisFIX, UTC.
	// FIXME define range limit values: plus/minus infinity, missing, etc?
	optional Interval lifeTime = 1;

	// Standard market hours, millisFIX.
	// FIXME static? dynamic? local market time zone? UTC?
	repeated Interval marketHours = 2;
}


// FIXME consider using DateTimeStamp.
message SymbolExpiration {

	// Year of century.
	optional sint32 year = 1;

	// Month of year.
	optional sint32 month = 2;

	// Day of month.
	optional sint32 day = 3;
}

// Date and time with time zone.
message DateTimeStamp {

	// Year of century.
	optional sint32 year = 1;

	// Month of year.
	optional sint32 month = 2;

	// Day of month.
	optional sint32 day = 3;

	// Hour of day.
	optional sint32 hour = 4;

	// Minute of hour.
	optional sint32 minute = 5;

	// Second of minute.
	optional sint32 second = 6;

	// Millisecond of second.
	optional sint32 millisecond = 7;

	// TZ database time zone name.
	optional string timeZoneName = 15;

}


// Spread leg instrument.
//
// Additional information about the leg
// is found in the instrument definition for the leg.
message SpreadLeg {

	// Market id of the leg instrument.
	optional sint64 marketId = 1;

	// Contract ratio of the leg.
	// Leg side (long vs short) is encoded as value sign.
	// Positive means "long". Negative means "short".
	optional Decimal ratio = 2;

	// Price weight of the leg.
	// Always positive.
	// Missing value means weight of "1.0"
	optional Decimal weight = 3;

}
